class nó():
    def __int__(self,chave,dado):
        self._valor = dado
        self._Esquerdo = None
        self._Direito = None
        self._pai = None
        self._chave = chave
        self._cor = 'Red'
    def getValor(self):
        return self._valor
    def setValor(self,NovoValor):
        self._valor = NovoValor
    def getDireito(self):
        return self._Esquerdo
    def setDireito(self,NovoLadoDireito):
        self._Direito =NovoLadoDireito
    def getEsquerdo(self,NovoLadoEsquerdo):
        self._Esquerdo = NovoLadoEsquerdo
    def getPai(self):
        return self._pai
    def setPai(self,NovoPai):
        self._pai=NovoPai
    def getChave(self):
        return self._chave
    def setChave(self,NovaChave):
        self._chave = NovaChave
    def getCor(self):
        return self._cor
    def setCor(self,NovaCor):
        self._cor = NovaCor
    def __str__(self):
        return str("Nó" + str(self.getChave())+ "\t" + "Informação" + str(self.getValor()))


class árvoreRN():
    def __init__(self,nome):
        self.nome = nó(None,None)
        self.nome.setPai(self.nome)
        self.nome.setDireito(self.nome)
        self.nome.setDireito(self.nome)
        self.nome.setCor("Preto")
        self._raiz = self.nome

    #def __iter__(self):
        #return self._raiz._iter__()
    def getRaiz(self):
        return  self._raiz
    def setRaiz(self,R):
        self._raiz = R

    def girarDireito(self,vertices ):
        folha = vertices.getDireito()
        vertices.setDireito(folha.getDireito())
        if(folha.getDireito() !=self.nome):
            folha.getDireito().setPai(vertices)
        folha.setPai(vertices.getPai())
        if(vertices.getPai()==self.nome):
            self.setRaiz(folha)
        elif (vertices==vertices.getPai().getDireito()):
            vertices.getPai().setDirito(folha)
        else:
            vertices.getPai().setDirito(folha)
        folha.getDireito(vertices)
        vertices.getPai(folha)

    def girarEsquerdo(self, verteces):
        folha = verteces.getEsquerdo()
        verteces.setEsquerdo(folha.getEsquerdo())
        if (folha.getEsquerdo() !=self.nome):
            folha.getEsquerdo().setPai(verteces)
        folha.setPai(verteces.getPai())
        if (verteces.getPai()==self.nome):
            self.setRaiz(folha)
        elif (verteces==verteces.getPai().getEsquerdo()):
            verteces.getPai().setEsquerdo(folha)
        else:
            verteces.getPai().setEsquerdo(folha)
        folha.getEsquerdo(verteces)
        verteces.getPai(folha)


    def girarFilhoDireito(self,x):
        filhoEsq = x.getEsquerdo()
        self.girarEsquerdo(filhoEsq)
        self.girarDireita(x)

    def girarFilhoEsquerdo(self,x):
        filhoDireito = x.getDireito()
        self.girarEsquerdo(filhoDireito)
        self.girarEsquerdo(x)

    def InserçãoÁrvoreT(self,z):
        y = self.nome
        x = self.getRaiz()
        while (x != self.nome):
            y = x
            if (z.getChave() < x.getChave()):
                x = x.getEsquerdo()
            else:
                x = x.getDireito()
        z.setPai(y)
        if (y == self.nome):
            self.setRaiz(z)
        elif (z.getChave() < y.getChave()):
            y.setEsquerdo(z)
        else:
            y.setDireito()
        z.setEsquerdo(self.nome)
        z.setDireito(self.nome)
        z.setCor("Red")

    def InserçãoÁrvore2T(self,z):
        while (z.getPai().getCor()== "Red"):
            if (z.getPai() == z.getPai().getPai().getEsquerdo()):
                y = z.getPai().getPai().getPai()
                if (y.getCor()=='Red'):
                    z.getPai().setCor('Preto')
                    y.getCor('Preto')
                    z.getPai().getPai().setCor('Red')
                    z = z.getPai().getPai()
            else:
                if(z == z.getPai().getDireito()):
                    z = z.getPai()
                    self.girarEsquerdo(z)
                z.getPai().setCor('Preto')
                z.getPai().getPai().setCor('Red')
                self.girarDireito(z.getPai()).getPai()

        self.setRaiz().setCor('Preto')

    def preOrdem(self,tree):
        #if tree:
        if(tree != self.nome):
            self.preOrdem(tree.getEsquerdo())
            print(tree.getValor())
            self.preOrdem(tree.getDireito())
    def transplant(self,u,v):
        if (u.getPai()==self.nome):
            self.setRaiz()
        elif (u == u.getPai().getEsquerdo()):
            u.getPai().setEquerdo(v)
        else:
            u.getPai().setDireito(v)
        v.setPai(u.getPai())

    def treeMaximo(self,i):
        while (i != self.nome):
            i=i.getDireito()
        return i
    def treeSucessor(self,i):
        if (i.getDireito() != self.nome):
            return  self.treeMaximo(i.getDireito())
        x= i.getPai()
        while (x != self.nome and i ==x.getDireito()):
            i = x
            x=x.getPai()
        return x
    def deleteFixUp2(self,z):
        if (z.getEsquerdo() == self.nome) or (z.getDireito() == self.nome()):
            a = z
        else:
            a = self.treeSucessor(z)
        if (a.getEsquerdo() != self.nome):
            b= a.getEsquerdo
        else:
            b = a.getDireito()
        b.setPai(a.getPai())
        if (a.getPai() == self.nome):
            self.getRaiz(b)
        else:
            if (a ==a.getPai().getEsquerdo()):
                a.getPai().setEsquerdo(b)
            else:
                a.getPai().setDireito(b)
        if (a != z):
            z.setChave(a.getChave())

        if (a.getCor() == 'Preto'):
            self.deleteFixUp2(b)
    def rbDelete(self,z):
        a = z
        vermelho = a.getCor
        if (z.getEsquerdo() == self.nome):
            b = z.getDireito()
            self.transplant(z,z.getDireito())
        elif (z.getDireito() == self.nome):
            b = z.getEsquerdo()
            self.transplant(z,z.getEsquerdo())
        else:
            a = self.treeMaximo(z.getDireito())
            vermelho = a.getCor()
            b = a.getDireito()
            if (a.getPai() == z):
                b.setPai(a)
            else:
                self.transplant(a,a.getDireito())
                a.setEsquerdo(z.getEsquerdo())
                a.getEsquerdo().setPai(a)
                a.setCor(z.getCor())
            if (vermelho == 'Preto'):
                self.deleteFixUp(b)
    def deleteFixUp(self,a):
        while (a != self.getRaiz()) and (a.getCor() == 'Preto'):
            if (a == a.getPai().getEsquerdo()):
                c = a.getPai().getDireito()
                if (c.getCor() == 'Red'):
                    c.setCor('Preto')
                    a.getPai().setCor('Red')
                    self.girarDireito(a.getPai())
                    c = a.getPai().getDireto()
                if (c.getEsquerdo().getCor() == 'Preto')and (c.getDireito().getCor() == 'Preto'):
                    c.setCor('Red')
                    a = a.getPai()
                else:
                    if (c.getEsquerdo().getCor() == 'Preto'):
                        c.getEsquerdo().setCor('Preto')
                        c.setCor('Red')
                        self.girarEsquerdo(c)
                        c = a.getPai().getDireito()
                    c.setCor(a.getPai().getCor())
                    a.getPai().getCor('Preto')
                    c.getDireito().setCor('Preto')
                    self.girarEsquerdo(a.getPai())
                    a= self.getRaiz()
            else:
                c = a.getPai().getEsquerdo()
                if (c.getCor()== 'Red'):
                    c.setCor('Preto')
                    a.getPai().getCor('Red')
                    self.girarDireito(a.getPai())
                    c = a.getPai().getEsquerdo()
                if (c.getDireito().setCor() == 'Preto') and (c.getEsquerdo().getCor() == 'Preto'):
                    c.setCor('Red')
                    self.girarEsquerdo(c)
                    a = a.getPai().getEsquerdo()
                c.setCor(a.getPai().getEsquerdo())
                a.getPai().setCor('Preto')
                c.getEsquerdo().setCor('Preto')
                self.girarDireito(a.getPai())
                a = self.getRaiz()
        a.setCor('Preto')

    def pesquisar(self,x,y):
        if (x == self.nome) or (x.getChave() ==y):
            return x
        elif (x < y.getChave()):
            return self.pesquisar(x.getEsquerdo == y)
        else:
            return self.pesquisar(x.getDireito == y)



